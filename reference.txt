View & Text:
    The most fundamental component for building a UI, View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls. 
    see here: https://reactnative.dev/docs/view

    A React component for displaying text.Text supports nesting, styling, and touch handling.

    see here: https://reactnative.dev/docs/text

    note: if you text inside a text it will inherit the property of parent text.


    ex: 

     <View style={styles.container}>
      <Text style={styles.boldText}>Test Arun Open up App.js to start working on <Text>{state}</Text>your app!</Text>
      </View>

Button:
    seehere: https://reactnative.dev/docs/button
            https://blog.logrocket.com/create-style-custom-buttons-react-native/
    in react-native button is a self closing tag.
    we cant use style property in button tag . react native wont allow to do that. better place inside a view it will give style for the btn.
    ex:
     <View style={styles.buttonContainer}>
          <Button title="Click Here !" />
      </View>

    onPress: event 
     <Button title="Click Here !" onPress={() => { handleClick() }} />


TextInput:
    TextInput Is The component we can able to collect user datas like our html input tag.

    see here: https://reactnative.dev/docs/textinput

    ex: <TextInput style={styles.input} placeholder='e.g. Arun Kumar' onChangeText={(val)=>setState(val)} />


List & Scroll Bar:

    React Native App Defaultly Dont Allow User To Scroll That Why It Has A Scroll View Component. 

    see here: https://reactnative.dev/docs/scrollview
    ex: 
      <ScrollView>
        {
          state.map((value, index) => {
            return (<View key={index} >
              <Text style={styles.item}>Im Index{index}</Text>
            </View>)
          })
        }
      </ScrollView>

Flat List :
    see here: https://reactnative.dev/docs/flatlist

    We Dont want to give key to view .it will take automatically.
    A performant interface for rendering basic, flat lists, supporting the most handy features:

    Fully cross-platform.
    Optional horizontal mode.
    Configurable viewability callbacks.
    Header support
    ex:

    <FlatList
        keyExtractor={(item, index) => index}
        data={state}
        numColumns={3}
        renderItem={({ item, index }) => {
          return (
            <Text style={styles.item}>Im Index{index}</Text>
          )
        }}
      >

      </FlatList>

TouchableOpacity:

    A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it.

    see here : https://reactnative.dev/docs/touchableopacity


    ex: 

      <View style={styles.container}>
      <TextInput style={styles.input} placeholder='e.g. Arun Kumar' onChangeText={(val) => setState(val)} keyboardType='numeric' />

      <FlatList
        keyExtractor={(item, index) => index}
        data={state}
        numColumns={3}
        renderItem={({ item, index }) => {
          return (
            <TouchableOpacity onPress={() => pressHandler(index)}>
              <Text style={styles.item}>Im Index{index}</Text>
            </TouchableOpacity>
          )
        }}
      >

      </FlatList>

       const pressHandler = (index) => {
            console.log(index)
            alert(`You clicked ${index}`)
        }

Alert:

  Launches an alert dialog with the specified title and message.

  see here; https://reactnative.dev/docs/alert

  ex:

      Alert.alert("OOPS!", "Enter Something...OkWa", [
        { text: "Understood", onPress: () => { console.log('alert closed') } }
      ])


TouchableWithoutFeedback:
    If the user try to to fill the user input component but the keyboard is comes he enter the value but how the keyboard will close again he supposed click a back button instead we can able to use the component to capture the event . 
if the user click the any place in the screen it will call the onPress event we can close keyboard.

see here: https://reactnative.dev/docs/touchablewithoutfeedback


flexbox:

ex: 

import React from 'react'
import { StyleSheet, View, Text } from 'react-native';


export default function Sandbox() {
    return (

        <View style={styles.container}>
            <Text style={styles.One}>One</Text>
            <Text style={styles.Two}>Two</Text>
            <Text style={styles.Three}>Three</Text>
            <Text style={styles.Four}>Four</Text>
            <Text style={styles.Five}>Five</Text>
        </View>
    )
}


const styles = StyleSheet.create({
    container: {
        paddingTop: 40,
        backgroundColor: "#ddd",
        flexDirection:"row",
        flex:1 //it will take all width of the screen

    },
    One: {
        backgroundColor: "violet",
        padding: 10
    },
    Two: {
        backgroundColor: "gold",
        padding: 10
    },
    Three: {
        backgroundColor: "coral",
        padding: 10
    },
    Four: {
        backgroundColor: "pink",
        padding: 10
    },
    Five: {
        backgroundColor: "skyblue",
        padding: 10
    }
})


Icons:
  when we create app with expo we dont need any dependencies it  has a icons inbuild

  see here: https://docs.expo.dev/guides/icons/